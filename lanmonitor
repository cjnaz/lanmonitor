#!/usr/bin/env python3
"""LAN monitor

Monitor status of network resources, such as services, hosts, file system age, system update age, etc.
See README.md for descriptions of available plugins.

Operates interactively with --once switch, or as a service (loop forever and controlled via systemd or other).
"""

__version__ = "V1.5 221120"

#==========================================================
#
#  Chris Nelson, 2021-2022
#
# V1.5  221120  Added --print-log switch, Summaries are optional if SummaryDays is not defined.
# V1.4  220420  Incorporated funcs3 timevalue and retime
# V1.3  220217  Updates for funcs3 V1.0, stock_notif catch of emailer fails.
# V1.2  210605  Reworked have_access check to check_LAN_access logic.
# V1.1  210523  Added loadconfig flush_on_reload to purge any deleted cfg keys.  Error formatting tweaks.
# V1.0  210507  Major refactor
# V0.1  210129  Initial
#
# Changes pending
#   Add --service switch, drop --once
#   
#==========================================================

import sys
import argparse
import time
import datetime
import os.path
import subprocess
import signal


sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), '../funcs3/'))
from funcs3 import PROGDIR, loadconfig, getcfg, cfg, logging, funcs3_min_version_check, funcs3_version, timevalue

import globvars
import lanmonfuncs


# Configs / Constants
PY_MIN_VERSION = 3.6
FUNCS3_MIN_VERSION = 1.1
CONFIG_FILE =     os.path.join(PROGDIR, 'lanmonitor.cfg')
CONSOLE_LOGGING_FORMAT = '{levelname:>8}:  {message}'



def main():

    first = True
    next_run = datetime.datetime.now()
    inst_dict = {}
    notif_handlers_list = []
    monline = {}


    while 1:
        reloaded = loadconfig(cfgfile = globvars.args.config_file, flush_on_reload=True, cfglogfile=None, cfglogfile_wins=logfile_override) #, cfgloglevel=10)
        if reloaded:
            next_run = datetime.datetime.now()      # Force immediate recheck

        if globvars.args.once:                      # In non-once mode, logging level is set from config file
            if globvars.args.verbose == 1:
                logging.getLogger().setLevel(logging.INFO)
            elif globvars.args.verbose == 2:
                logging.getLogger().setLevel(logging.DEBUG)
            else:
                logging.getLogger().setLevel(logging.WARNING)

        if first:
            if not globvars.args.once:
                time.sleep (timevalue(getcfg('StartupDelay')).seconds)
            reloaded = True                         # Force calc of key and host padding lengths

        # Every RecheckInterval
        if next_run < datetime.datetime.now():
            next_run = datetime.datetime.now() + datetime.timedelta(seconds=timevalue(getcfg("RecheckInterval")).seconds)

            if reloaded:
                if not first:
                    logging.warning(f"NOTE - The config file has been reloaded.")

                # Refresh the notifications handlers
                notif_handlers_list.clear()
                notif_handlers = getcfg("Notif_handlers", None)
                try:
                    if notif_handlers is not None:
                        for handler in notif_handlers.split():
                            notif_plugin = __import__(handler)
                            notif_inst = notif_plugin.notif_class()
                            notif_handlers_list.extend([notif_inst])
                except:
                    logging.error (f"Unable to load notification handler <{handler}> - Aborting.")
                    sys.exit(1)

                # Clear out all current instances, forcing re-setup
                inst_dict.clear()
                globvars.keylen = 0
                globvars.hostlen = 0
                for key in cfg:                 # Get keylen and hostlen field widths across all monitored items
                    if key.startswith("MonType_"):
                        montype_tag = key.split("_")[1]
                        for line in cfg:
                            if line.startswith(montype_tag + "_"):
                                if len(line) > globvars.keylen:
                                    globvars.keylen = len(line)
                                host = lanmonfuncs.split_user_host_port(cfg[line].split(maxsplit=1)[0])[1]
                                if len(host) > globvars.hostlen:
                                    globvars.hostlen = len(host)

            # Confirm LAN access on every iteration
            have_LAN_access = lanmonfuncs.check_LAN_access()      # True if "Gateway" host can be reached
            if not have_LAN_access:
                logging.warning(f"WARNING:  NO ACCESS TO LAN ({getcfg('Gateway')}) - Checks on remote hosts are skipped for this iteration.")

            for montype in cfg:
                if montype.startswith("MonType_"):
                    montype_tag = montype.split("_", maxsplit=1)[1]
                    montype_plugin = cfg[montype]
    
                    plugin = __import__(montype_plugin)

                    # Process all lines in cfg of this MonType
                    for key in cfg:
                        if key.startswith(montype_tag + "_"):

                            # Instantiate the monitor item and call setup
                            if key not in inst_dict:
                                monline.clear()     # Construct the setup call dictionary
                                monline["key"] = key
                                monline["tag"] = key.split("_", maxsplit=1)[1]
                                xx = cfg[key].split(maxsplit=1)
                                u_h_p = xx[0]
                                monline["user_host_port"] = u_h_p
                                _, host, _ = lanmonfuncs.split_user_host_port(u_h_p)
                                monline["host"] = host
                                monline["critical"] = False
                                monline["rest_of_line"] = xx[1]
                                if monline["rest_of_line"].startswith("CRITICAL"):
                                    monline["critical"] = True
                                    monline["rest_of_line"] = monline["rest_of_line"].split(maxsplit=1)[1]

                                inst = plugin.monitor()
                                rslt = inst.setup(monline)          # SETUP CALL
                                #   setup successful returns RTN_PASS - remembered in inst_dict as instance pointer
                                #   setup hard fail  returns RTN_FAIL - remembered in inst_dict as False
                                #   Some plugins may need to interrogate the target host during setup.
                                #       If the interrogation fails (i.e., can't access), then the plugin.setup should return
                                #       RTN_WARNING.  The warning is logged, but no entry in the inst_dict is made 
                                #       so that setup is retried on each iteration.
                                if rslt == lanmonfuncs.RTN_PASS:
                                    inst_dict[key] = inst
                                elif rslt == lanmonfuncs.RTN_FAIL:
                                    _msg = f"MONITOR SETUP FOR <{key}> FAILED.  THIS RESOURCE IS NOT MONITORED."
                                    logging.error(f"  ERROR:  {_msg}")
                                    for notif_handler in notif_handlers_list:
                                        notif_handler.log_event({"rslt":lanmonfuncs.RTN_WARNING, "notif_key":key,
                                                    "message":f"  WARNING: {key} - {host} - {_msg}"})
                                    inst_dict[key] = False
                                elif rslt == lanmonfuncs.RTN_WARNING:
                                    _msg = f"MONITOR SETUP FOR <{key}> FAILED.  WILL RETRY."
                                    logging.error(f"  WARNING:  {_msg}")
                                    for notif_handler in notif_handlers_list:
                                        notif_handler.log_event({"rslt":lanmonfuncs.RTN_WARNING, "notif_key":key,
                                                    "message":f"  WARNING: {key} - {host} - {_msg}"})
                                else:
                                    logging.critical (f"Setup for <{key}> returned illegal value {rslt} - Aborting.")
                                    sys.exit(1)


                            # Execute eval_status
                            inst = False
                            if key in inst_dict:
                                inst = inst_dict[key]
                            if inst is not False:
                                if inst.host == "local" or have_LAN_access:
                                    rslt = inst.eval_status()       # EVAL_STATUS CALL
                                    for notif_handler in notif_handlers_list:
                                        notif_handler.log_event(rslt)

        
        for notif_handler in notif_handlers_list:
            notif_handler.each_loop()

        for notif_handler in notif_handlers_list:
            notif_handler.renotif()

        for notif_handler in notif_handlers_list:
            notif_handler.summary()

        if globvars.args.once:
            sys.exit(0)

        first = False
        time.sleep (10)     # Fixed 10s service loop


def int_handler(signal, frame):
    logging.warning(f"Signal {signal} received.  Exiting.")
    sys.exit(0)
signal.signal(signal.SIGINT,  int_handler)      # Ctrl-C
signal.signal(signal.SIGTERM, int_handler)      # kill


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__ + __version__, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-1', '--once', action='store_true',
                        help="Single run mode.  Logging is to console rather than file.")
    parser.add_argument('-p', '--print-log', action='store_true',
                        help="Print the tail end of the log file (last 40 lines).")
    parser.add_argument('-v', '--verbose', action='count',
                        help="Display OK items in --once mode. (-vv for debug logging)")
    parser.add_argument('--config-file', default=CONFIG_FILE,
                        help=f"Path to config file (default <{CONFIG_FILE}>).")
    parser.add_argument('-V', '--version', action='version', version='%(prog)s ' + __version__,
                        help="Return version number and exit.")
    globvars.args = parser.parse_args()
    
    logfile_override = True  if globvars.args.once  else False
    try:
        loadconfig(globvars.args.config_file, cfglogfile_wins=logfile_override)
    except Exception as e:
        logging.error(f"Failed loading config file <{globvars.args.config_file}> - Aborting.\n  {e}")
        sys.exit(1)


    logging.warning (f"========== {os.path.basename(__file__)} ({__version__}) ==========")


    # Python min version check
    py_version = float(sys.version_info.major) + float(sys.version_info.minor)/10
    if py_version < PY_MIN_VERSION:
        logging.error (f"Current Python version {py_version} is less than minimum required version {PY_MIN_VERSION}.  Aborting.")
        sys.exit(1)


    # funcs3 min version check
    if not funcs3_min_version_check(FUNCS3_MIN_VERSION):
        logging.error(f"funcs3 module must be at least version <V{FUNCS3_MIN_VERSION}>.  Found <{funcs3_version}>.  Aborting.")
        sys.exit(1)
    else:
        logging.debug(f"funcs3 module version <{funcs3_version}> (min required <V{FUNCS3_MIN_VERSION}>)")


    # Print the tail end of the log file
    if globvars.args.print_log:
        _fp = getcfg("LogFile")
        if not os.path.isabs(_fp):
            _fp = os.path.join(PROGDIR, _fp)
        subprocess.run(["tail", "-40", _fp])
        sys.exit()


    main()
    sys.exit()