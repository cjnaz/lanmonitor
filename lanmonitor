#!/usr/bin/env python3
"""LAN monitor

Monitor status of items on the local network, such as services, hosts, file system age, etc.
Plugins are provided for these items, and additional plugins may easily be added:
    SELinux status
    Hosts ping response
    Systemd services active and running
    Web pages responding with expected text
    Processes existing
    Filesystem age

Operates interactively with --once switch, or as a service (loop forever and controlled via systemd or other).
"""

__version__ = "V1.1 210523"

#==========================================================
#
#  Chris Nelson, 2021
#
# V1.1  210523  Added loadconfig flush_on_reload to purge any deleted cfg keys.  Error formattting tweaks.
# V1.0  210507  Major refactor
# V0.1  210129  Initial
#
# Changes pending
#   
#==========================================================

import sys
import argparse
import time
import datetime
import os.path
import signal       # For keyboard interrupt handler


sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), '../funcs3/'))
from funcs3 import loadconfig, getcfg, cfg, setuplogging, logging, funcs3_min_version_check, funcs3_version

import globvars
import lanmonfuncs


# Configs / Constants
PY_MIN_VERSION = 3.6
FUNCS3_MIN_VERSION = 0.7
CONFIG_FILE =     os.path.join(os.path.dirname(os.path.realpath(__file__)), 'lanmonitor.cfg')
LOG_FILE =        os.path.join(os.path.dirname(os.path.realpath(__file__)), "log_lanmonitor.txt")


py_version = float(sys.version_info.major) + float(sys.version_info.minor)/10
if py_version < PY_MIN_VERSION:
    print (f"ERROR:  Current Python version {py_version} is less than minimum required version {PY_MIN_VERSION} - Aborting.")
    sys.exit(1)


def main():

    try:
        loadconfig(cfgfile = globvars.args.config_file) #, cfgloglevel=10)
    except Exception:
        logging.error(f"Cannot access config file <{globvars.args.config_file}> - Aborting.")
        sys.exit(1)

    first = True
    next_run = datetime.datetime.now()
    inst_dict = {}
    notif_handlers_list = []
    monline = {}


    while 1:
        reloaded = loadconfig(cfgfile = globvars.args.config_file, flush_on_reload=True) #, cfgloglevel=10)
        if reloaded:
            next_run = datetime.datetime.now()      # Force immediate recheck

        if globvars.args.once:                      # In non-once mode, logging level is set from config file
            if globvars.args.verbose == 1:
                logging.getLogger().setLevel(logging.INFO)
            elif globvars.args.verbose == 2:
                logging.getLogger().setLevel(logging.DEBUG)
            else:
                logging.getLogger().setLevel(logging.WARNING)

        if first:
            logging.warning(f"{__file__} {__version__}")
            if not globvars.args.once:
                time.sleep (lanmonfuncs.convert_time(getcfg('StartupDelay'))[0])
            reloaded = True                         # Force calc of key and host padding lengths

        if next_run < datetime.datetime.now():
            next_run = datetime.datetime.now() + datetime.timedelta(seconds=lanmonfuncs.convert_time(getcfg("RecheckInterval"))[0])

            if reloaded:
                if not first:
                    logging.warning(f"NOTE - The config file has been reloaded.")

                notif_handlers_list.clear()
                notif_handlers = getcfg("Notif_handlers", None)
                try:
                    if notif_handlers is not None:
                        for handler in notif_handlers.split():
                            notif_plugin = __import__(handler)
                            notif_inst = notif_plugin.notif_class()
                            notif_handlers_list.extend([notif_inst])
                except:
                    logging.error (f"Unable to load notification handler <{handler}> - Aborting.")
                    sys.exit(1)

                inst_dict.clear()               # Clear out all current instances, forcing re-setup
                globvars.keylen = 0
                globvars.hostlen = 0
                for key in cfg:                 # Get keylen and hostlen field widths across all monitored items
                    if key.startswith("MonType_"):
                        montype_tag = key.split("_")[1]
                        for line in cfg:
                            if line.startswith(montype_tag + "_"):
                                if len(line) > globvars.keylen:
                                    globvars.keylen = len(line)
                                host = lanmonfuncs.split_user_host_port(cfg[line].split(maxsplit=1)[0])[1]
                                if len(host) > globvars.hostlen:
                                    globvars.hostlen = len(host)

            lanmonfuncs.have_access_dict.clear()   # Force access check refresh on every RecheckInterval
            for montype in cfg:
                if montype.startswith("MonType_"):
                    montype_tag = montype.split("_", maxsplit=1)[1]
                    montype_plugin = cfg[montype]
    
                    plugin = __import__(montype_plugin)

                    for key in cfg:    # Process all lines in cfg of this type
                        if key.startswith(montype_tag + "_"):

                            # Instantiate the monitor item and call setup
                            #   setup hard fail  returns RTN_FAIL - remembered in inst_dict as False
                            #   setup successful returns RTN_PASS - remembered in inst_dict as instance pointer
                            #   Some plugins may need to interrogate the target host during setup.
                            #       If the interrogation fails (i.e., can't access), then the plugin.setup should return
                            #       RTN_WARNING.  The warning is logged, but no entry in the inst_dict is made 
                            #       so that setup is retried on each iteration.
                            if key not in inst_dict:
                                monline.clear()     # Construct the setup call dictionary
                                monline["key"] = key
                                monline["tag"] = key.split("_", maxsplit=1)[1]
                                xx = cfg[key].split(maxsplit=1)
                                u_h_p = xx[0]
                                monline["user_host_port"] = u_h_p
                                _, host, _ = lanmonfuncs.split_user_host_port(u_h_p)
                                monline["host"] = host
                                monline["critical"] = False
                                monline["rest_of_line"] = xx[1]
                                if monline["rest_of_line"].startswith("CRITICAL"):
                                    monline["critical"] = True
                                    monline["rest_of_line"] = monline["rest_of_line"].split(maxsplit=1)[1]

                                inst = plugin.monitor()
                                rslt = inst.setup(monline)
                                if rslt == lanmonfuncs.RTN_PASS:
                                    inst_dict[key] = inst
                                elif rslt == lanmonfuncs.RTN_FAIL:
                                    _msg = f"MONITOR SETUP FOR <{key}> FAILED.  THIS RESOURCE IS NOT MONITORED."
                                    logging.error(f"  ERROR:  {_msg}")
                                    for notif_handler in notif_handlers_list:
                                        notif_handler.log_event({"rslt":lanmonfuncs.RTN_WARNING, "notif_key":key,
                                                    "message":f"  WARNING: {key} - {host} - {_msg}"})
                                    inst_dict[key] = False
                                elif rslt == lanmonfuncs.RTN_WARNING:
                                    _msg = f"MONITOR SETUP FOR <{key}> FAILED.  WILL RETRY."
                                    logging.error(f"  WARNING:  {_msg}")
                                    for notif_handler in notif_handlers_list:
                                        notif_handler.log_event({"rslt":lanmonfuncs.RTN_WARNING, "notif_key":key,
                                                    "message":f"  WARNING: {key} - {host} - {_msg}"})
                                else:
                                    logging.critical (f"Setup for <{key}> returned illegal value {rslt} - Aborting.")
                                    sys.exit(1)


                            # Confirm access to remote host and call eval_status
                            inst = False
                            if key in inst_dict:
                                inst = inst_dict[key]
                            if inst is not False:
                                access_status, fail_message = lanmonfuncs.have_access(u_h_p)
                                if access_status:
                                    rslt = inst.eval_status()
                                    for notif_handler in notif_handlers_list:
                                        notif_handler.log_event(rslt)
                                else:
                                    for notif_handler in notif_handlers_list:
                                        notif_handler.log_event({"rslt":lanmonfuncs.RTN_WARNING, "notif_key":key,
                                                    "message":f"  WARNING: {key} - {host} - {fail_message} - skipping check"})

        
        for notif_handler in notif_handlers_list:
            notif_handler.each_loop()

        for notif_handler in notif_handlers_list:
            notif_handler.renotif()

        for notif_handler in notif_handlers_list:
            notif_handler.summary()

        if globvars.args.once:
            sys.exit(0)

        first = False
        time.sleep (10)     # Fixed 10s service loop


def keyboardInterruptHandler(signal, frame):
    print(f"KeyboardInterrupt (ID: {signal}) has been caught. Cleaning up...")
    sys.exit(0)
signal.signal(signal.SIGINT, keyboardInterruptHandler)



if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__ + __version__, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-1', '--once', action='store_true',
                        help="Single run mode.  Logging is to console rather than file.")
    parser.add_argument('-v', '--verbose', action='count',
                        help="Display OK items in --once mode. (Set by LoggingLevel in config file for non --once mode.)")
    parser.add_argument('--config-file', default=CONFIG_FILE,
                        help=f"Path to config file (default <{CONFIG_FILE}>).")
    parser.add_argument('--log-file', default=LOG_FILE,
                        help=f"Path to log file (default <{LOG_FILE}>).")
    parser.add_argument('-V', '--version', action='version', version='%(prog)s ' + __version__,
                        help="Return version number and exit.")
    globvars.args = parser.parse_args()
    
    if globvars.args.once:
        setuplogging(logfile=None)
    else:
        setuplogging(logfile=globvars.args.log_file)
    
    if not funcs3_min_version_check(FUNCS3_MIN_VERSION):
        logging.error(f"ERROR:  funcs3 module must be at least version {FUNCS3_MIN_VERSION}.  Found <{funcs3_version}> - Aborting.")
        sys.exit(1)

    main()
    sys.exit()